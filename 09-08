<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Test2</title>
	<style>
		canvas {
 			position: absolute;
 			margin: auto;
 			top: 0;
 			bottom: 0;
 			left: 0;
 			right: 0;
 		}
	</style>

</head>
<body>

<audio autoplay id = "myAudio"> <source src="audio.mp3" type="audio/mpeg"></audio>




<script>

// Declares all the variables.
var WIDTH=400, HEIGHT=600;
var canvas, ctx, keystate; 
var text, song;
var strumBar;
var chart, n;
var speed;
var notes;
var SpaceBar=32;
var timePressed;

// Sets the speed of the notes as they move down the canvas.
speed = 200;

// Sets the number of test notes to display.
n = 800;

// Creates an array to store the notes from the chart file.
chart = [];
for (var i = 0; i < n; i++)
    chart.push({});
for (var i = 0; i < n; i++)
	chart[i].strumTime = 4 + i * .5;

// Accesses the audio file.
song = document.getElementById("myAudio");

// Gets the current amount of time the song has been playing for.
function getCurTime(audioName) {
	return audioName.currentTime;
}

// Checks to see whether a given key is pressed and at what time.
function checkIfPressed() {
	if (keystate[SpaceBar]) 
		timePressed = getCurTime(song); 
}

// Stores information related to the notes as they move down the canvas.
notes = {
	
	// Updates the location of the notes based on the time in the song.
	update: function() {
		for(var i = 0; i < n; i++)
			chart[i].y = strumBar.y - (chart[i].strumTime - getCurTime(song)) * speed;
	},

	// Draws the notes on the canvas.
	draw: function() {
		var noteWidth = 50;
		var noteHeight = 24;
		ctx.fillStyle = "#FFFFFF";
		for(var i = 0; i < n; i++)
			ctx.fillRect(WIDTH/2 - noteWidth/2, chart[i].y, noteWidth, noteHeight);
	}
}

// Stores information related to the strumbar,
// which is where notes on the canvas line up with where they are in the song.
strumBar = {
	x:0,
	y:500,
	width:WIDTH,
	height:10,

	draw: function() {
		ctx.fillStyle = "#FFFFFF";
		ctx.fillRect(strumBar.x, strumBar.y, strumBar.width, strumBar.height);
	}
}

// Stores information related to debug text.
text = {
	x:null,
	y:null,
	width: 200,
	height: 100,
	time:null,

	// Updates the strings given in the debug text.
	update: function() {
		time = getCurTime(song)
	},

	// Draws the text itself in the corner of the canvas.
	draw: function() {
		ctx.font = "24px TimesNewRoman";
		ctx.fillText("Text test", text.x, text.y);
		ctx.fillText(time, 0, 48);
		ctx.fillText(chart[0].y, 0, 72);
		ctx.fillText(timePressed, 0, 96);
	}
}

// Draws the canvas, creates keystate listeners, initializes the function,
// and updates everything.
function main() {
	canvas = document.createElement("canvas");
	canvas.width = WIDTH;
	canvas.height = HEIGHT;
	ctx  = canvas.getContext("2d");
	document.body.appendChild(canvas);

	keystate = {};
	document.addEventListener("keydown", function(evt) {
		keystate[evt.keyCode] = true;
	});
	document.addEventListener("keyup", function(evt) {
		delete keystate[evt.keyCode];
	});

	init();

	var loop = function() {
		update();
		draw();

		window.requestAnimationFrame(loop, canvas);
	};
	window.requestAnimationFrame(loop, canvas);
}

// Gives the initial locations of objects on the screen.
function init() {
	text.x = 0;
	text.y = 24;
}

// Accesses all the update functions and calls them.
function update() {
	text.update();
	notes.update();
	checkIfPressed();
}

// Draws the canvas; accesseses the draw functions and calls them.
function draw() {
	ctx.fillRect(0, 0, WIDTH, HEIGHT);

	ctx.save();

	ctx.fillStyle = "#fff";
	text.draw();
	strumBar.draw();
	notes.draw();
	
	ctx.restore();
}

// Calls the main function.
main();

</script>



</body>
</html>
